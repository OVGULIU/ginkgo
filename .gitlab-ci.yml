image: localhost:5000/gko-cuda100-gnu7-llvm60

stages:
  - sync
  - code_quality
  - deploy
  - QoS_tools
  - benchmark-build
  - benchmark-cuda
  - benchmark-omp
  - benchmark-reference
  - on-failure

# Templates with reasonable defaults for builds and tests
.variables_template: &default_variables
  BENCHMARK_SERVER: "FINECI"
  C_COMPILER: gcc
  CXX_COMPILER: g++
  BUILD_TYPE: Debug
  BUILD_REFERENCE: "ON"
  BUILD_OMP: "OFF"
  BUILD_CUDA: "OFF"
  CXX_FLAGS: ""
  EXTRA_CMAKE_FLAGS: ""

.before_script_template: &default_before_script
  - export OMP_NUM_THREADS=4

.before_script_git_template: &git_before_script
    # set up identities
  - eval $(ssh-agent -s)
  - echo "${BOT_KEY}" | tr -d '\r' | ssh-add - >/dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa gitlab.com github.com >>~/.ssh/known_hosts
  - git config --global user.name "${BOT_USER}"
  - git config --global user.email "${BOT_EMAIL}"

.build_template: &default_build
  stage: build
  variables: *default_variables
  before_script: *default_before_script
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}"
        -DCMAKE_CUDA_HOST_COMPILER=$(which ${CXX_COMPILER}) ${EXTRA_CMAKE_FLAGS}
        -DGINKGO_DEVEL_TOOLS=OFF -DGINKGO_BUILD_REFERENCE=${BUILD_REFERENCE}
        -DGINKGO_BUILD_OMP=${BUILD_OMP} -DGINKGO_BUILD_CUDA=${BUILD_CUDA}
        -DGINKGO_BUILD_TESTS=ON -DGINKGO_BUILD_EXAMPLES=ON
    - make -j$(grep "core id" /proc/cpuinfo | sort -u | wc -l)
  artifacts:
    paths:
      - "build/*/*/*/*/*/CMakeCache.txt"
      - "build/*/*/*/*/*/*.cmake"
      - "build/*/*/*/*/*/core/test"
      - "build/*/*/*/*/*/cuda/test"
      - "build/*/*/*/*/*/omp/test"
      - "build/*/*/*/*/*/reference/test"
      - "build/*/*/*/*/*/core/libginkgo*"
      - "build/*/*/*/*/*/cuda/libginkgo*"
      - "build/*/*/*/*/*/omp/libginkgo*"
      - "build/*/*/*/*/*/reference/libginkgo*"
      - "build/*/*/*/*/*/core/device_hooks/libginkgo*"
      - "build/*/*/*/*/*/*/CTestTestfile.cmake"
      - "build/*/*/*/*/*/*/*/CTestTestfile.cmake"
  except:
      - schedules
# build paths are of the form: build/<cuda_version>/<compiler>/<module(s)>/{debug,release}/{shared,static}/
# see: the name of our building jobs
#
# All CTestTestfile.cmake files have to be added for the `ctest` command to
# work. These files are found recursively starting from the build directory in
# every subdirectory.

.test_template: &default_test
  stage: test
  before_script: *default_before_script
  script:
    - cd ${CI_JOB_NAME/test/build}
    - |
        (( $(ctest -N | tail -1 | sed 's/Total Tests: //') != 0 )) || exit 1
    - ctest -V
  except:
      - schedules

sync:
  stage: sync
  variables:
    GIT_STRATEGY: none
    PRIVATE_REPO: git@gitlab.com:ginkgo-project/ginkgo.git
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
  before_script: *git_before_script
  script:
    - git clone ${PRIVATE_REPO} -b ${CI_COMMIT_REF_NAME} repo_sync
    - cd repo_sync
    - git pull --ff-only ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PRIVATE_REPO} ${CI_COMMIT_REF_NAME}
    - git push ${PUBLIC_REPO} ${CI_COMMIT_REF_NAME}
  only:
    - master
    - develop
  except:
    - schedules

# Code analysis and reporting tool
sonarqube:
  stage: code_quality
  image: localhost:5000/gko-cuda100-gnu7-llvm60
  script:
    - mkdir -p ${CI_JOB_NAME} && cd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}"
        -DCMAKE_CUDA_HOST_COMPILER=$(which ${CXX_COMPILER}) ${EXTRA_CMAKE_FLAGS}
        -DGINKGO_DEVEL_TOOLS=OFF -DGINKGO_BUILD_REFERENCE=${BUILD_REFERENCE}
        -DGINKGO_BUILD_OMP=${BUILD_OMP} -DGINKGO_BUILD_CUDA=${BUILD_CUDA}
        -DGINKGO_BUILD_TESTS=ON -DGINKGO_BUILD_EXAMPLES=ON
    - build-wrapper-linux-x86-64 --out-dir bw-output make -j$(grep "core id"
      /proc/cpuinfo | sort -u | wc -l)
    - cd ${CI_PROJECT_DIR}
    - sonar-scanner -Dsonar.login=${SONARQUBE_LOGIN}
      -Dsonar.cfamily.build-wrapper-output=${CI_JOB_NAME}/bw-output
  variables:
    <<: *default_variables
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
  dependencies: []
  allow_failure: yes


# Deploy documentation to github-pages
gh-pages:
  stage: deploy
  image: localhost:5000/gko-nocuda-gnu8-llvm70
  variables:
    <<: *default_variables
    PUBLIC_REPO: git@github.com:ginkgo-project/ginkgo.git
  before_script: *git_before_script
  script:
    # build docs
    - mkdir -p ${CI_JOB_NAME} && pushd ${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR}
        -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=ON
        ${EXTRA_CMAKE_FLAGS} -DGINKGO_DEVEL_TOOLS=OFF -DGINKGO_BUILD_REFERENCE=OFF
        -DGINKGO_BUILD_OMP=OFF -DGINKGO_BUILD_CUDA=OFF -DGINKGO_BUILD_TESTS=OFF
        -DGINKGO_BUILD_EXAMPLES=OFF -DGINKGO_BUILD_DOC=ON -DGINKGO_DOC_GENERATE_PDF=ON
    - make usr
    - make pdf
    - popd
    # publish it
    - git clone ${PUBLIC_REPO} -b gh-pages gh-pages-repo
    - rm -rf gh-pages-repo/doc/${CI_COMMIT_REF_NAME}
    - mkdir -p gh-pages-repo/doc
    - mkdir -p gh-pages-repo/doc/pdf
    - cp -r ${CI_JOB_NAME}/doc/usr gh-pages-repo/doc/${CI_COMMIT_REF_NAME}
    - cp ${CI_JOB_NAME}/doc/pdf.pdf gh-pages-repo/doc/pdf/${CI_COMMIT_REF_NAME}.pdf
    - export CURRENT_SHA="$(git rev-parse --short HEAD)"
    - cd gh-pages-repo
    - git add -A
    - git diff --quiet HEAD ||
      (git commit -m "Update documentation from ${CURRENT_SHA}" && git push)
  dependencies: []
  only:
    refs:
      - develop
      - master
      - tags
    variables:
      - $PUBLIC_CI_TAG
  except:
      - schedules


coverage:
  stage: QoS_tools
  image: localhost:5000/gko-cuda100-gnu7-llvm60
  before_script: *default_before_script
  script:
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=COVERAGE
    - bash <(curl -s https://codecov.io/bash)
  dependencies: []
  only:
    refs:
      - master
      - develop
    variables:
      - $PUBLIC_CI_TAG

threadsanitizer:
  stage: QoS_tools
  image: localhost:5000/gko-cuda100-gnu7-llvm60
  before_script: *default_before_script
  script:
    - export CC=clang
    - export CXX=clang++
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=TSAN -DCTEST_MEMORYCHECK_TYPE=ThreadSanitizer
  dependencies: []
  only:
    refs:
      - master
      - develop
    variables:
      - $PUBLIC_CI_TAG

addresssanitizer:
  stage: QoS_tools
  image: localhost:5000/gko-cuda100-gnu7-llvm60
  before_script: *default_before_script
  script:
    - export CC=clang
    - export CXX=clang++
    - ctest -S cmake/CTestScript.cmake -DCTEST_BUILD_CONFIGURATION=ASAN -DCTEST_MEMORYCHECK_TYPE=AddressSanitizer
  dependencies: []
  only:
    refs:
      - master
      - develop
    variables:
      - $PUBLIC_CI_TAG

valgrind:
  stage: QoS_tools
  image: localhost:5000/gko-cuda100-gnu7-llvm60
  before_script: *default_before_script
  script:
    - ctest -S cmake/CTestScript.cmake -DCTEST_MEMORYCHECK_TYPE=Valgrind
  dependencies: []
  only:
    refs:
      - master
      - develop
    variables:
      - $PUBLIC_CI_TAG


# Benchmark build
.benchmark_before_script_template: &default_benchmark_before_script
  # set up identities
  - eval $(ssh-agent -s)
  - tmp_key=${BENCHMARK_SERVER}_SSH_KEY
  - echo "${!tmp_key}" | tr -d '\r' | ssh-add - >/dev/null
  - echo "${BOT_KEY}" | tr -d '\r' | ssh-add - >/dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - tmp_name=${BENCHMARK_SERVER}_SSH_NAME
  - ssh-keyscan -t rsa "${!tmp_name}" >>~/.ssh/known_hosts
  - ssh-keyscan -t rsa gitlab.com github.com >>~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - tmp_user=${BENCHMARK_SERVER}_SSH_USER
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - SSH_COMMAND="ssh ${!tmp_user}@${!tmp_name}"
  - git config --global user.name "${BOT_USER}"
  - git config --global user.email "${BOT_EMAIL}"

fineci-benchmark-build:
  stage: benchmark-build
  variables:
    <<: *default_variables
    BENCHMARK_SERVER: FINECI
    BUILD_TYPE: Release
    BUILD_OMP: "ON"
    BUILD_CUDA: "ON"
    PUBLIC_REPO: https://github.com/ginkgo-project/ginkgo.git
    BENCHMARK_REPO: https://github.com/ginkgo-project/ginkgo-data.git
  before_script: *default_benchmark_before_script
  script:
    - |
      ${SSH_COMMAND} 'tee /dev/stderr | scl enable devtoolset-7 bash' << EOT
        set -xe
        rm -rf ginkgo
        git clone ${PUBLIC_REPO} ginkgo
        cd ginkgo
        git checkout ${CI_COMMIT_SHA}
        mkdir build
        cd build
        cmake3 .. -DCMAKE_C_COMPILER=${C_COMPILER} \\
                  -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \\
                  -DCMAKE_CUDA_COMPILER=/usr/local/cuda-9.2/bin/nvcc \\
                  -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \\
                  -DBUILD_SHARED_LIBS=ON ${EXTRA_CMAKE_FLAGS} \\
                  -DGINKGO_DEVEL_TOOLS=OFF \\
                  -DGINKGO_BUILD_REFERENCE=${BUILD_REFERENCE} \\
                  -DGINKGO_BUILD_OMP=${BUILD_OMP} \\
                  -DGINKGO_BUILD_CUDA=${BUILD_CUDA} \\
                  -DGINKGO_BUILD_TESTS=OFF -DGINKGO_BUILD_EXAMPLES=OFF \\
                  -DGINKGO_BUILD_BENCHMARKS=ON
        make -j$(grep 'core id' /proc/cpuinfo | sort -u | wc -l)
      EOT
  dependencies: []
  only:
    - schedules
#    - develop
#    - master


# Benchmark runs
.benchmark_template: &default_benchmark
  before_script: *default_benchmark_before_script
  script:
    # run benchmarks
    - |
      ${SSH_COMMAND} 'tee /dev/stderr | scl enable devtoolset-7 bash' \
            >results.json << EOT
        module load cuda/cuda-10.0
        set -xe
        cd ginkgo/build/benchmark
        make benchmark SYSTEM_NAME=${SYSTEM_NAME} EXECUTOR=${EXECUTOR}
        tar -czf data.tar.gz results
      EOT
    # publish them
    - export CURRENT_SHA="$(git rev-parse --short HEAD)"
    - git clone ${BENCHMARK_REPO} data-repo
    - cd data-repo/data/
    - scp ${!tmp_user}@${!tmp_name}:ginkgo/build/benchmark/data.tar.gz .
    - tar -xzf data.tar.gz --strip-components=1
    - rm data.tar.gz
    - ./build-list . >list.json
    - ./agregate <list.json >agregate.json
    - git add -A
    - git diff --quiet HEAD ||
      (git commit -m
         "Benchmark ${EXECUTOR} of ginkgo-project/ginkgo@${CURRENT_SHA}"
       && git push)
  dependencies: []
  only:
    - schedules
#    - develop
#    - master

fineci-benchmark-cuda:
  stage: benchmark-cuda
  variables:
    <<: *default_variables
    BENCHMARK_SERVER: FINECI
    EXECUTOR: cuda
    PUBLIC_REPO: https://github.com/ginkgo-project/ginkgo.git
    BENCHMARK_REPO: git@github.com:ginkgo-project/ginkgo-data.git
    SYSTEM_NAME: K20Xm
  <<: *default_benchmark

# fineci-benchmark-omp:
#   stage: benchmark-omp
#   variables:
#     <<: *default_variables
#     BENCHMARK_SERVER: FINECI
#     EXECUTOR: omp
#     PUBLIC_REPO: https://github.com/ginkgo-project/ginkgo.git
#     BENCHMARK_REPO: git@github.com:ginkgo-project/ginkgo-data.git
#     SYSTEM_NAME: E5-2670
#   <<: *default_benchmark

# fineci-benchmark-reference:
#   stage: benchmark-reference
#   variables:
#     <<: *default_variables
#     BENCHMARK_SERVER: FINECI
#     EXECUTOR: reference
#     PUBLIC_REPO: https://github.com/ginkgo-project/ginkgo.git
#     BENCHMARK_REPO: git@github.com:ginkgo-project/ginkgo-data.git
#     SYSTEM_NAME: E5-2670
#   <<: *default_benchmark

new-issue-on-failure:
  stage: on-failure
  script: curl --request POST "https://gitlab.com/api/v4/projects/${PROJECT_ID}/issues?private_token=${BOT_ACCESS_TOKEN}&title=Error%20in%20${CI_PROJECT_NAME}%20with%20pipeline%20${CI_PIPELINE_ID}%20for%20commit%20${CI_COMMIT_SHA}&labels&description=${CI_PIPELINE_URL}"
  when: on_failure
  only:
    refs:
      - develop
      - master
  dependencies: []
